import {
  computeBarcodeParity,
  validateBarcodeParity,
} from "@/page-components/erp/barcode/validator";
import { describe, expect, test } from "vitest";

const answers = [
  7, 0, 3, 6, 9, 2, 5, 8, 1, 4, 0, 3, 6, 9, 2, 5, 8, 1, 4, 7, 3, 6, 9, 2, 5, 8,
  1, 4, 7, 0, 6, 9, 2, 5, 8, 1, 4, 7, 0, 3, 9, 2, 5, 8, 1, 4, 7, 0, 3, 6, 2, 5,
  8, 1, 4, 7, 0, 3, 6, 9, 5, 8, 1, 4, 7, 0, 3, 6, 9, 2, 8, 1, 4, 7, 0, 3, 6, 9,
  2, 5, 1, 4, 7, 0, 3, 6, 9, 2, 5, 8, 4, 7, 0, 3, 6, 9, 2, 5, 8, 1, 8, 1, 4, 7,
  0, 3, 6, 9, 2, 5, 1, 4, 7, 0, 3, 6, 9, 2, 5, 8, 4, 7, 0, 3, 6, 9, 2, 5, 8, 1,
  7, 0, 3, 6, 9, 2, 5, 8, 1, 4, 0, 3, 6, 9, 2, 5, 8, 1, 4, 7, 3, 6, 9, 2, 5, 8,
  1, 4, 7, 0, 6, 9, 2, 5, 8, 1, 4, 7, 0, 3, 9, 2, 5, 8, 1, 4, 7, 0, 3, 6, 2, 5,
  8, 1, 4, 7, 0, 3, 6, 9, 5, 8, 1, 4, 7, 0, 3, 6, 9, 2, 9, 2, 5, 8, 1, 4, 7, 0,
  3, 6, 2, 5, 8, 1, 4, 7, 0, 3, 6, 9, 5, 8, 1, 4, 7, 0, 3, 6, 9, 2, 8, 1, 4, 7,
  0, 3, 6, 9, 2, 5, 1, 4, 7, 0, 3, 6, 9, 2, 5, 8, 4, 7, 0, 3, 6, 9, 2, 5, 8, 1,
  7, 0, 3, 6, 9, 2, 5, 8, 1, 4, 0, 3, 6, 9, 2, 5, 8, 1, 4, 7, 3, 6, 9, 2, 5, 8,
  1, 4, 7, 0, 6, 9, 2, 5, 8, 1, 4, 7, 0, 3, 0, 3, 6, 9, 2, 5, 8, 1, 4, 7, 3, 6,
  9, 2, 5, 8, 1, 4, 7, 0, 6, 9, 2, 5, 8, 1, 4, 7, 0, 3, 9, 2, 5, 8, 1, 4, 7, 0,
  3, 6, 2, 5, 8, 1, 4, 7, 0, 3, 6, 9, 5, 8, 1, 4, 7, 0, 3, 6, 9, 2, 8, 1, 4, 7,
  0, 3, 6, 9, 2, 5, 1, 4, 7, 0, 3, 6, 9, 2, 5, 8, 4, 7, 0, 3, 6, 9, 2, 5, 8, 1,
  7, 0, 3, 6, 9, 2, 5, 8, 1, 4, 1, 4, 7, 0, 3, 6, 9, 2, 5, 8, 4, 7, 0, 3, 6, 9,
  2, 5, 8, 1, 7, 0, 3, 6, 9, 2, 5, 8, 1, 4, 0, 3, 6, 9, 2, 5, 8, 1, 4, 7, 3, 6,
  9, 2, 5, 8, 1, 4, 7, 0, 6, 9, 2, 5, 8, 1, 4, 7, 0, 3, 9, 2, 5, 8, 1, 4, 7, 0,
  3, 6, 2, 5, 8, 1, 4, 7, 0, 3, 6, 9, 5, 8, 1, 4, 7, 0, 3, 6, 9, 2, 8, 1, 4, 7,
  0, 3, 6, 9, 2, 5, 2, 5, 8, 1, 4, 7, 0, 3, 6, 9, 5, 8, 1, 4, 7, 0, 3, 6, 9, 2,
  8, 1, 4, 7, 0, 3, 6, 9, 2, 5, 1, 4, 7, 0, 3, 6, 9, 2, 5, 8, 4, 7, 0, 3, 6, 9,
  2, 5, 8, 1, 7, 0, 3, 6, 9, 2, 5, 8, 1, 4, 0, 3, 6, 9, 2, 5, 8, 1, 4, 7, 3, 6,
  9, 2, 5, 8, 1, 4, 7, 0, 6, 9, 2, 5, 8, 1, 4, 7, 0, 3, 9, 2, 5, 8, 1, 4, 7, 0,
  3, 6, 3, 6, 9, 2, 5, 8, 1, 4, 7, 0, 6, 9, 2, 5, 8, 1, 4, 7, 0, 3, 9, 2, 5, 8,
  1, 4, 7, 0, 3, 6, 2, 5, 8, 1, 4, 7, 0, 3, 6, 9, 5, 8, 1, 4, 7, 0, 3, 6, 9, 2,
  8, 1, 4, 7, 0, 3, 6, 9, 2, 5, 1, 4, 7, 0, 3, 6, 9, 2, 5, 8, 4, 7, 0, 3, 6, 9,
  2, 5, 8, 1, 7, 0, 3, 6, 9, 2, 5, 8, 1, 4, 0, 3, 6, 9, 2, 5, 8, 1, 4, 7, 4, 7,
  0, 3, 6, 9, 2, 5, 8, 1, 7, 0, 3, 6, 9, 2, 5, 8, 1, 4, 0, 3, 6, 9, 2, 5, 8, 1,
  4, 7, 3, 6, 9, 2, 5, 8, 1, 4, 7, 0, 6, 9, 2, 5, 8, 1, 4, 7, 0, 3, 9, 2, 5, 8,
  1, 4, 7, 0, 3, 6, 2, 5, 8, 1, 4, 7, 0, 3, 6, 9, 5, 8, 1, 4, 7, 0, 3, 6, 9, 2,
  8, 1, 4, 7, 0, 3, 6, 9, 2, 5, 1, 4, 7, 0, 3, 6, 9, 2, 5, 8, 5, 8, 1, 4, 7, 0,
  3, 6, 9, 2, 8, 1, 4, 7, 0, 3, 6, 9, 2, 5, 1, 4, 7, 0, 3, 6, 9, 2, 5, 8, 4, 7,
  0, 3, 6, 9, 2, 5, 8, 1, 7, 0, 3, 6, 9, 2, 5, 8, 1, 4, 0, 3, 6, 9, 2, 5, 8, 1,
  4, 7, 3, 6, 9, 2, 5, 8, 1, 4, 7, 0, 6, 9, 2, 5, 8, 1, 4, 7, 0, 3, 9, 2, 5, 8,
  1, 4, 7, 0, 3, 6, 2, 5, 8, 1, 4, 7, 0, 3, 6, 9, 6, 9, 2, 5, 8, 1, 4, 7, 0, 3,
  9, 2, 5, 8, 1, 4, 7, 0, 3, 6, 2, 5, 8, 1, 4, 7, 0, 3, 6, 9, 5, 8, 1, 4, 7, 0,
  3, 6, 9, 2, 8, 1, 4, 7, 0, 3, 6, 9, 2, 5, 1, 4, 7, 0, 3, 6, 9, 2, 5, 8, 4, 7,
  0, 3, 6, 9, 2, 5, 8, 1, 7, 0, 3, 6, 9, 2, 5, 8, 1, 4, 0, 3, 6, 9, 2, 5, 8, 1,
  4, 7, 3, 6, 9, 2, 5, 8, 1, 4, 7, 0,
];

describe("Barcode Validator", () => {
  test("validator", async () => {
    const barcode_no_parity = 10012340004;
    const parity = computeBarcodeParity(barcode_no_parity);
    const barcode = (barcode_no_parity * 10 + parity) * 10;
    const is_it_right = validateBarcodeParity(barcode);

    expect(is_it_right).toBeTruthy();
  });
  test("validator", async () => {
    for (let i = 0; i < 1000; i++) {
      const barcode = 10000000000 + i;
      // biome-ignore lint/style/noNonNullAssertion: hardcoded
      expect(computeBarcodeParity(barcode)).toBe(answers[i]!);
    }
  });
});
